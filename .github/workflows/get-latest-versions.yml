name: Get Latest Versions
on:
  push:
    branches:
      - master

jobs:
  getLatestVersions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Store versions to variables
        id: versions
        run: |
          cat versions.txt
          varNames=("hash" "release" "prerelease")
          idx=0
          while IFS= read -r line; do
            echo "${varNames[$idx]}=$line"
            echo "${varNames[$idx]}=$line" >> $GITHUB_OUTPUT
            idx=$((idx+1))
          done < versions.txt
      - uses: octokit/request-action@v2.x
        id: get_master_commit_tizen
        with:
          route: GET /repos/{owner}/{repo}/commits/master
          owner: jellyfin
          repo: jellyfin-tizen
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Output master commit hash
        run: |
          echo "${{ fromJson(steps.get_master_commit_tizen.outputs.data).sha }}" > versions.txt
      # - uses: octokit/request-action@v2.x
      #   id: get_latest_release_web
      #   with:
      #     route: GET /repos/{owner}/{repo}/releases/latest
      #     owner: jellyfin
      #     repo: jellyfin-web
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - run: "echo latest release: '${{ fromJson(steps.get_latest_release_web.outputs.data).tag_name }}', '${{ fromJson(steps.get_latest_release_web.outputs.data).html_url }}'"
      - name: "Get Latest Web Release"
        id: last_web_release
        uses: robinraju/release-downloader@cb096d8fa1fcb0e897f30b1c571f07e2c8e12479
        with:
          repository: 'jellyfin/jellyfin-web'
          latest: true
          tarBall: true
          zipBall: false
      - name: "Get Latest Web PreRelease"
        id: last_web_prerelease
        uses: robinraju/release-downloader@cb096d8fa1fcb0e897f30b1c571f07e2c8e12479
        with:
          repository: 'jellyfin/jellyfin-web'
          latest: true
          preRelease: true
          tarBall: true
          zipBall: false
      - name: Output web release tag
        run: |
          echo "${{ steps.last_web_release.outputs.tag_name }}" >> versions.txt
      - name: Output web prerelease tag
        run: |
          echo "${{ steps.last_web_prerelease.outputs.tag_name }}" >> versions.txt
      - name: Commit Version Data
        run: |
          git config --global user.name 'jeppevinkel'
          git config --global user.email 'jeppevinkel@users.noreply.github.com'
          git add -A
          git commit -m "Automated Version Update" || echo "No changes to commit"
          git push
      - name: Check for differences
        id: diffcheck
        run: |
          causeOfUpdateLabel = ""
          shouldUpdate = false
          echo "hash: ${{ steps.versions.outputs.hash }} = ${{ steps.versions.outputs.hash != fromJson(steps.get_master_commit_tizen.outputs.data).sha}}"
          if ${{ steps.versions.outputs.hash != fromJson(steps.get_master_commit_tizen.outputs.data).sha}}; then
            causeOfUpdateLabel += "New commit to https://github.com/jellyfin/jellyfin-tizen/commit/${{ fromJson(steps.get_master_commit_tizen.outputs.data).sha }}\n"
            shouldUpdate = true
          fi
          echo "release: ${{ steps.versions.outputs.release }} = ${{ steps.versions.outputs.release != steps.last_web_release.outputs.tag_name }}"
          if ${{ steps.versions.outputs.release != steps.last_web_release.outputs.tag_name }}; then
            causeOfUpdateLabel += "New jellyfin-web release\n"
            shouldUpdate = true
          fi
          echo "prerelease: ${{ steps.versions.outputs.prerelease }} = ${{ steps.versions.outputs.prerelease != steps.last_web_prerelease.outputs.tag_name }}"
          if ${{ steps.versions.outputs.prerelease != steps.last_web_prerelease.outputs.tag_name }}; then
            causeOfUpdateLabel += "New jellyfin-web prerelease\n"
            shouldUpdate = true
          fi

          if $shouldUpdate; then
            echo "shouldUpdate=true" >> $GITHUB_OUTPUT
          else
            echo "shouldUpdate=false" >> $GITHUB_OUTPUT
          fi
      - name: Trigger build workflow
        if: ${{ steps.diffcheck.outputs.shouldUpdate == 'true' }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: build-new-release.yml
          inputs: '{"webRelease": {"url": "${{ steps.last_web_release.outputs.html_url }}", "name": "${{ steps.last_web_release.outputs.tag_name }}"}, "webPreRelease": {"url": "${{ steps.last_web_prerelease.outputs.html_url }}", "name": "${{ steps.last_web_prerelease.outputs.tag_name }}"}, "rawMd": "${{ steps.diffcheck.outputs.causeOfUpdateLabel }}"}'
